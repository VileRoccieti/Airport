/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package airport;

import airport.controller.AddToFlightController;
import airport.controller.AirplaneController;
import airport.controller.FlightsController;
import airport.controller.LocationController;
import airport.controller.PassengerController;
import airport.controller.UpdateInfoController;
import airport.controller.utils.Response;
import airport.controller.utils.Status;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

/**
 *
 * @author edangulo
 */
public class AirportFrame extends javax.swing.JFrame {

    /**
     * Creates new form AirportFrame
     */
    private int x, y;
    private ArrayList<Passenger> passengers;
    private ArrayList<Plane> planes;
    private ArrayList<Location> locations;
    private ArrayList<Flight> flights;

    public AirportFrame() {
        initComponents();

        this.passengers = new ArrayList<>();
        this.planes = new ArrayList<>();
        this.locations = new ArrayList<>();
        this.flights = new ArrayList<>();

        this.setBackground(new Color(0, 0, 0, 0));
        this.setLocationRelativeTo(null);

        this.generateMonths();
        this.generateDays();
        this.generateHours();
        this.generateMinutes();
        this.blockPanels();

        loadData();
    }

    private void blockPanels() {
        //9, 11
        for (int i = 1; i < jTabbedPane1.getTabCount(); i++) {
            if (i != 9 && i != 11) {
                jTabbedPane1.setEnabledAt(i, false);
            }
        }
    }

    private void generateMonths() {
        for (int i = 1; i < 13; i++) {
            MONTH.addItem("" + i);
            FlightRegistrationDepartureDateMonth.addItem("" + i);
            UpdateInfoBirthDateMonth.addItem("" + i);
        }
    }

    private void generateDays() {
        for (int i = 1; i < 32; i++) {
            DAY.addItem("" + i);
            FlightRegistrationDepartureDateDay.addItem("" + i);
            UpdateInfoBirthDateDay.addItem("" + i);
        }
    }

    private void generateHours() {
        for (int i = 0; i < 24; i++) {
            FlightRegistrationDepartureDateHour.addItem("" + i);
            FlightRegistrationDurationHour.addItem("" + i);
            FlightRegistrationDurationHour2.addItem("" + i);
            DelayHours.addItem("" + i);
        }
    }

    private void generateMinutes() {
        for (int i = 0; i < 60; i++) {
            FlightRegistrationMinute.addItem("" + i);
            FlightRegistrationDurationMinute.addItem("" + i);
            DAY4.addItem("" + i);
            DelayMinutes.addItem("" + i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRound1 = new airport.PanelRound();
        panelRound2 = new airport.PanelRound();
        jButton13 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        user = new javax.swing.JRadioButton();
        administrator = new javax.swing.JRadioButton();
        userSelect = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        PassengerIndicative = new javax.swing.JTextField();
        PassengerID = new javax.swing.JTextField();
        YEAR = new javax.swing.JTextField();
        PassengerCountry = new javax.swing.JTextField();
        PassngerPhone = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        PassengerLastName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        MONTH = new javax.swing.JComboBox<>();
        PassengerFirstName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        DAY = new javax.swing.JComboBox<>();
        RegisterPassengerButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        AirplaneID = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        AirplaneBranch = new javax.swing.JTextField();
        AirplaneModel = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        AirpleaneMaxCapacity = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        AirplaneAirline = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        AirplaneRegistration = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        LocationRegistrationAirportID = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        LocationRegistrationAirportName = new javax.swing.JTextField();
        LocationRegistrationAirportCity = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        LocationRegistrationAirportCountry = new javax.swing.JTextField();
        LocationRegistrationAirportLatitude = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        LocationRegistrationAirportLongitude = new javax.swing.JTextField();
        LocationRegistrationButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        UpdateInfoID = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        UpdateInfoFirstName = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        UpdateInfoLastName = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        UpdateInfoBirthDateYear = new javax.swing.JTextField();
        UpdateInfoBirthDateMonth = new javax.swing.JComboBox<>();
        UpdateInfoBirthDateDay = new javax.swing.JComboBox<>();
        UpdateInfoPhone = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        UpdateInfoPhoneIndicative = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        CountryUpdateInfo = new javax.swing.JTextField();
        UpdateInfoButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        AddFlightID = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        AddFlightFlight = new javax.swing.JComboBox<>();
        AddToFlightButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ShowMyFlightsTable = new javax.swing.JTable();
        ShowMyFlightsButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ShowAllPassengersTable = new javax.swing.JTable();
        RefreshPassengers = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ShowAllFlightsTable = new javax.swing.JTable();
        ShowAllFlightsButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        ShowAllPlanesButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ShowAllPlanesTable = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ShowAllLocationsTable = new javax.swing.JTable();
        ShowAllLocationsButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        DelayHours = new javax.swing.JComboBox<>();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        DelayID = new javax.swing.JComboBox<>();
        jLabel48 = new javax.swing.JLabel();
        DelayMinutes = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        FlightRegistrationID = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        FlightRegistrationPlane = new javax.swing.JComboBox<>();
        FlightRegistrationLocation = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        FlightRegistrationArrivalLocation = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        FlightRegistrationScaleLocation = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        FlightRegistrationDepartureYear = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        FlightRegistrationDepartureDateMonth = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        FlightRegistrationDepartureDateDay = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        FlightRegistrationDepartureDateHour = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        FlightRegistrationMinute = new javax.swing.JComboBox<>();
        FlightRegistrationDurationHour = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        FlightRegistrationDurationMinute = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        FlightRegistrationDurationHour2 = new javax.swing.JComboBox<>();
        DAY4 = new javax.swing.JComboBox<>();
        FlightRegistrationButton = new javax.swing.JButton();
        panelRound3 = new airport.PanelRound();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelRound1.setRadius(40);
        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelRound2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelRound2MouseDragged(evt);
            }
        });
        panelRound2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelRound2MousePressed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jButton13.setText("X");
        jButton13.setBorderPainted(false);
        jButton13.setContentAreaFilled(false);
        jButton13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound2Layout.createSequentialGroup()
                .addContainerGap(1083, Short.MAX_VALUE)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        panelRound2Layout.setVerticalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addComponent(jButton13)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        panelRound1.add(panelRound2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, -1));

        jTabbedPane1.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        user.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        user.setText("User");
        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });
        jPanel1.add(user, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, -1, -1));

        administrator.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        administrator.setText("Administrator");
        administrator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                administratorActionPerformed(evt);
            }
        });
        jPanel1.add(administrator, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 164, -1, -1));

        userSelect.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        userSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User" }));
        userSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userSelectActionPerformed(evt);
            }
        });
        jPanel1.add(userSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 130, -1));

        jTabbedPane1.addTab("Administration", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel1.setText("Country:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, -1));

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel2.setText("ID:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel3.setText("First Name:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel4.setText("Last Name:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel5.setText("Birthdate:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel6.setText("+");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 20, -1));

        PassengerIndicative.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel2.add(PassengerIndicative, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 50, -1));

        PassengerID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel2.add(PassengerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 130, -1));

        YEAR.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel2.add(YEAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 90, -1));

        PassengerCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel2.add(PassengerCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 130, -1));

        PassngerPhone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel2.add(PassngerPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, 130, -1));

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel7.setText("Phone:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, -1, -1));

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel8.setText("-");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, 30, -1));

        PassengerLastName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel2.add(PassengerLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 130, -1));

        jLabel9.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel9.setText("-");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, 30, -1));

        MONTH.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        MONTH.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));
        jPanel2.add(MONTH, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, -1, -1));

        PassengerFirstName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel2.add(PassengerFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 130, -1));

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel10.setText("-");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 280, 30, -1));

        DAY.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DAY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));
        jPanel2.add(DAY, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 280, -1, -1));

        RegisterPassengerButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RegisterPassengerButton.setText("Register");
        RegisterPassengerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterPassengerButtonActionPerformed(evt);
            }
        });
        jPanel2.add(RegisterPassengerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 480, -1, -1));

        jTabbedPane1.addTab("Passenger registration", jPanel2);

        jPanel3.setLayout(null);

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel11.setText("ID:");
        jPanel3.add(jLabel11);
        jLabel11.setBounds(53, 96, 22, 25);

        AirplaneID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel3.add(AirplaneID);
        AirplaneID.setBounds(180, 93, 130, 35);

        jLabel12.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel12.setText("Brand:");
        jPanel3.add(jLabel12);
        jLabel12.setBounds(53, 157, 50, 25);

        AirplaneBranch.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel3.add(AirplaneBranch);
        AirplaneBranch.setBounds(180, 154, 130, 35);

        AirplaneModel.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel3.add(AirplaneModel);
        AirplaneModel.setBounds(180, 213, 130, 35);

        jLabel13.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel13.setText("Model:");
        jPanel3.add(jLabel13);
        jLabel13.setBounds(53, 216, 55, 25);

        AirpleaneMaxCapacity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel3.add(AirpleaneMaxCapacity);
        AirpleaneMaxCapacity.setBounds(180, 273, 130, 35);

        jLabel14.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel14.setText("Max Capacity:");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(53, 276, 109, 25);

        AirplaneAirline.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jPanel3.add(AirplaneAirline);
        AirplaneAirline.setBounds(180, 333, 130, 35);

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel15.setText("Airline:");
        jPanel3.add(jLabel15);
        jLabel15.setBounds(53, 336, 70, 25);

        AirplaneRegistration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirplaneRegistration.setText("Create");
        AirplaneRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AirplaneRegistrationActionPerformed(evt);
            }
        });
        jPanel3.add(AirplaneRegistration);
        AirplaneRegistration.setBounds(490, 480, 120, 40);

        jTabbedPane1.addTab("Airplane registration", jPanel3);

        jLabel16.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel16.setText("Airport ID:");

        LocationRegistrationAirportID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel17.setText("Airport name:");

        LocationRegistrationAirportName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LocationRegistrationAirportCity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel18.setText("Airport city:");

        jLabel19.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel19.setText("Airport country:");

        LocationRegistrationAirportCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LocationRegistrationAirportLatitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel20.setText("Airport latitude:");

        jLabel21.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel21.setText("Airport longitude:");

        LocationRegistrationAirportLongitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LocationRegistrationButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LocationRegistrationButton.setText("Create");
        LocationRegistrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocationRegistrationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LocationRegistrationAirportLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationRegistrationAirportID, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationRegistrationAirportName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationRegistrationAirportCity, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationRegistrationAirportCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationRegistrationAirportLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(515, 515, 515)
                        .addComponent(LocationRegistrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(515, 515, 515))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel17)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel18)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel19)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel20))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(LocationRegistrationAirportID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(LocationRegistrationAirportName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(LocationRegistrationAirportCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(LocationRegistrationAirportCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(LocationRegistrationAirportLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(LocationRegistrationAirportLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(LocationRegistrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        jTabbedPane1.addTab("Location registration", jPanel13);

        jLabel36.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel36.setText("ID:");

        UpdateInfoID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel37.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel37.setText("First Name:");

        UpdateInfoFirstName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel38.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel38.setText("Last Name:");

        UpdateInfoLastName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel39.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel39.setText("Birthdate:");

        UpdateInfoBirthDateYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        UpdateInfoBirthDateMonth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UpdateInfoBirthDateMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        UpdateInfoBirthDateDay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UpdateInfoBirthDateDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        UpdateInfoPhone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel40.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel40.setText("-");

        UpdateInfoPhoneIndicative.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel41.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel41.setText("+");

        jLabel42.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel42.setText("Phone:");

        jLabel43.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel43.setText("Country:");

        CountryUpdateInfo.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        UpdateInfoButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UpdateInfoButton.setText("Update");
        UpdateInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addGap(108, 108, 108)
                                .addComponent(UpdateInfoID, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addGap(41, 41, 41)
                                .addComponent(UpdateInfoFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addGap(43, 43, 43)
                                .addComponent(UpdateInfoLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel39)
                                .addGap(55, 55, 55)
                                .addComponent(UpdateInfoBirthDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(UpdateInfoBirthDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(UpdateInfoBirthDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel42)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(UpdateInfoPhoneIndicative, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(UpdateInfoPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel43)
                                .addGap(63, 63, 63)
                                .addComponent(CountryUpdateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(507, 507, 507)
                        .addComponent(UpdateInfoButton)))
                .addContainerGap(586, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(UpdateInfoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(UpdateInfoFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(UpdateInfoLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39)
                    .addComponent(UpdateInfoBirthDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateInfoBirthDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateInfoBirthDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel42)
                    .addComponent(jLabel41)
                    .addComponent(UpdateInfoPhoneIndicative, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(UpdateInfoPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel43)
                    .addComponent(CountryUpdateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UpdateInfoButton)
                .addGap(113, 113, 113))
        );

        jTabbedPane1.addTab("Update info", jPanel5);

        AddFlightID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel44.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel44.setText("ID:");

        jLabel45.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel45.setText("Flight:");

        AddFlightFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AddFlightFlight.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flight" }));

        AddToFlightButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AddToFlightButton.setText("Add");
        AddToFlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToFlightButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45))
                .addGap(79, 79, 79)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddFlightFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddFlightID, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(860, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddToFlightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(509, 509, 509))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel44))
                    .addComponent(AddFlightID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(AddFlightFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 288, Short.MAX_VALUE)
                .addComponent(AddToFlightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );

        jTabbedPane1.addTab("Add to flight", jPanel6);

        ShowMyFlightsTable.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ShowMyFlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Departure Date", "Arrival Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ShowMyFlightsTable);

        ShowMyFlightsButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ShowMyFlightsButton.setText("Refresh");
        ShowMyFlightsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowMyFlightsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ShowMyFlightsButton)
                .addGap(527, 527, 527))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(ShowMyFlightsButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Show my flights", jPanel7);

        ShowAllPassengersTable.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ShowAllPassengersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Birthdate", "Age", "Phone", "Country", "Num Flight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ShowAllPassengersTable);

        RefreshPassengers.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshPassengers.setText("Refresh");
        RefreshPassengers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshPassengersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(489, 489, 489)
                        .addComponent(RefreshPassengers))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1078, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RefreshPassengers)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Show all passengers", jPanel8);

        ShowAllFlightsTable.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ShowAllFlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Departure Airport ID", "Arrival Airport ID", "Scale Airport ID", "Departure Date", "Arrival Date", "Plane ID", "Number Passengers"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ShowAllFlightsTable);

        ShowAllFlightsButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ShowAllFlightsButton.setText("Refresh");
        ShowAllFlightsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllFlightsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(521, 521, 521)
                        .addComponent(ShowAllFlightsButton)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ShowAllFlightsButton)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Show all flights", jPanel9);

        ShowAllPlanesButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ShowAllPlanesButton.setText("Refresh");
        ShowAllPlanesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllPlanesButtonActionPerformed(evt);
            }
        });

        ShowAllPlanesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Model", "Max Capacity", "Airline", "Number Flights"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(ShowAllPlanesTable);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(ShowAllPlanesButton))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(220, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(ShowAllPlanesButton)
                .addGap(17, 17, 17))
        );

        jTabbedPane1.addTab("Show all planes", jPanel10);

        ShowAllLocationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airport ID", "Airport Name", "City", "Country"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(ShowAllLocationsTable);

        ShowAllLocationsButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ShowAllLocationsButton.setText("Refresh");
        ShowAllLocationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllLocationsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(ShowAllLocationsButton))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(303, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(ShowAllLocationsButton)
                .addGap(17, 17, 17))
        );

        jTabbedPane1.addTab("Show all locations", jPanel11);

        DelayHours.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DelayHours.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        jLabel46.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel46.setText("Hours:");

        jLabel47.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel47.setText("ID:");

        DelayID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DelayID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID" }));
        DelayID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelayIDActionPerformed(evt);
            }
        });

        jLabel48.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel48.setText("Minutes:");

        DelayMinutes.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DelayMinutes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        jButton7.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jButton7.setText("Delay");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel48)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DelayMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel47)
                            .addComponent(jLabel46))
                        .addGap(79, 79, 79)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DelayHours, 0, 136, Short.MAX_VALUE)
                            .addComponent(DelayID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(820, 820, 820))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addGap(531, 531, 531))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(DelayID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(DelayHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(DelayMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 307, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addGap(33, 33, 33))
        );

        jTabbedPane1.addTab("Delay flight", jPanel12);

        jLabel22.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel22.setText("ID:");

        FlightRegistrationID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel23.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel23.setText("Plane:");

        FlightRegistrationPlane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationPlane.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Plane" }));
        FlightRegistrationPlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlightRegistrationPlaneActionPerformed(evt);
            }
        });

        FlightRegistrationLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        jLabel24.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel24.setText("Departure location:");

        FlightRegistrationArrivalLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationArrivalLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        jLabel25.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel25.setText("Arrival location:");

        jLabel26.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel26.setText("Scale location:");

        FlightRegistrationScaleLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationScaleLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        jLabel27.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel27.setText("Duration:");

        jLabel28.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel28.setText("Duration:");

        jLabel29.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel29.setText("Departure date:");

        FlightRegistrationDepartureYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        jLabel30.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel30.setText("-");

        FlightRegistrationDepartureDateMonth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationDepartureDateMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        jLabel31.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel31.setText("-");

        FlightRegistrationDepartureDateDay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationDepartureDateDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        jLabel32.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel32.setText("-");

        FlightRegistrationDepartureDateHour.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationDepartureDateHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        jLabel33.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel33.setText("-");

        FlightRegistrationMinute.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        FlightRegistrationDurationHour.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationDurationHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        jLabel34.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel34.setText("-");

        FlightRegistrationDurationMinute.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationDurationMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        jLabel35.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jLabel35.setText("-");

        FlightRegistrationDurationHour2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationDurationHour2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        DAY4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DAY4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        FlightRegistrationButton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightRegistrationButton.setText("Create");
        FlightRegistrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlightRegistrationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FlightRegistrationScaleLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FlightRegistrationArrivalLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(46, 46, 46)
                        .addComponent(FlightRegistrationLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FlightRegistrationID)
                            .addComponent(FlightRegistrationPlane, 0, 130, Short.MAX_VALUE))))
                .addGap(45, 45, 45)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(FlightRegistrationDepartureYear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(FlightRegistrationDepartureDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(FlightRegistrationDepartureDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(FlightRegistrationDepartureDateHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(FlightRegistrationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(FlightRegistrationDurationHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(FlightRegistrationDurationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(FlightRegistrationDurationHour2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(DAY4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FlightRegistrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(530, 530, 530))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel22))
                    .addComponent(FlightRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(FlightRegistrationPlane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FlightRegistrationDepartureDateHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(FlightRegistrationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel24)
                                .addComponent(FlightRegistrationLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel29))
                            .addComponent(FlightRegistrationDepartureYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FlightRegistrationDepartureDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30)
                            .addComponent(jLabel31)
                            .addComponent(FlightRegistrationDepartureDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel25)
                                .addComponent(FlightRegistrationArrivalLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel28))
                            .addComponent(FlightRegistrationDurationHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34)
                            .addComponent(FlightRegistrationDurationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FlightRegistrationDurationHour2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35)
                            .addComponent(DAY4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel26)
                                .addComponent(FlightRegistrationScaleLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel27)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(FlightRegistrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jTabbedPane1.addTab("Flight registration", jPanel4);

        panelRound1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 41, 1150, 620));

        javax.swing.GroupLayout panelRound3Layout = new javax.swing.GroupLayout(panelRound3);
        panelRound3.setLayout(panelRound3Layout);
        panelRound3Layout.setHorizontalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
        );
        panelRound3Layout.setVerticalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        panelRound1.add(panelRound3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 660, 1150, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void panelRound2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelRound2MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_panelRound2MousePressed

    private void panelRound2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelRound2MouseDragged
        this.setLocation(this.getLocation().x + evt.getX() - x, this.getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_panelRound2MouseDragged

    private void administratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_administratorActionPerformed
        if (user.isSelected()) {
            user.setSelected(false);
            userSelect.setSelectedIndex(0);

        }
        for (int i = 1; i < jTabbedPane1.getTabCount(); i++) {
            jTabbedPane1.setEnabledAt(i, true);
        }
        jTabbedPane1.setEnabledAt(4, false);
        jTabbedPane1.setEnabledAt(5, false);
        jTabbedPane1.setEnabledAt(6, false);
        userSelect.setEnabled(false);

    }//GEN-LAST:event_administratorActionPerformed

    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        userSelect.setEnabled(true);
        if (administrator.isSelected()) {
            administrator.setSelected(false);
        }
        for (int i = 1; i < jTabbedPane1.getTabCount(); i++) {

            jTabbedPane1.setEnabledAt(i, false);

        }
        jTabbedPane1.setEnabledAt(5, true);
        jTabbedPane1.setEnabledAt(6, true);
        jTabbedPane1.setEnabledAt(8, true);
        jTabbedPane1.setEnabledAt(10, true);
        jTabbedPane1.setEnabledAt(4, true);
        userSelect.removeAllItems();
        userSelect.addItem("Select User");

        File file = new File("json/passengers.json");
        if (file.exists()) {
            try (InputStream is = new FileInputStream(file)) {
                JSONArray array = new JSONArray(new JSONTokener(is));
                for (int i = 0; i < array.length(); i++) {
                    JSONObject obj = array.getJSONObject(i);
                    long id = obj.getLong("id");
                    String firstname = obj.getString("firstname");
                    String lastname = obj.getString("lastname");
                    String item = id + " - " + firstname + " " + lastname;
                    userSelect.addItem(item);
                }
            } catch (IOException | JSONException e) {
                JOptionPane.showMessageDialog(null, "Error leyendo passengers.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró passengers.json", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_userActionPerformed

    private void RegisterPassengerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterPassengerButtonActionPerformed
        try {
            String idStr = PassengerID.getText().trim();
            String firstname = PassengerFirstName.getText().trim();
            String lastname = PassengerLastName.getText().trim();
            String yearStr = YEAR.getText().trim();
            String monthStr = MONTH.getItemAt(MONTH.getSelectedIndex()).trim();
            String dayStr = DAY.getItemAt(DAY.getSelectedIndex()).trim();
            String phoneCodeStr = PassengerIndicative.getText().trim();
            String phoneStr = PassngerPhone.getText().trim();
            String country = PassengerCountry.getText().trim();

            Response response = PassengerController.createPassenger(idStr, firstname, lastname, yearStr, monthStr, dayStr, phoneCodeStr, phoneStr, country);
            if (response.getStatus() != Status.CREATED) {
                JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            long id = Long.parseLong(idStr);
            int year = Integer.parseInt(yearStr);
            int month = Integer.parseInt(monthStr);
            int day = Integer.parseInt(dayStr);
            int phoneCode = Integer.parseInt(phoneCodeStr);
            long phone = Long.parseLong(phoneStr);

            LocalDate birthDate = LocalDate.of(year, month, day);
            int age = Period.between(birthDate, LocalDate.now()).getYears();

            String numFlight = "0";

            Passenger p = new Passenger(id, firstname, lastname, birthDate, phoneCode, phone, country);
            this.passengers.add(p);
            this.userSelect.addItem(String.valueOf(id));

            File file = new File("passengers.json");

            if (!file.exists()) {
                boolean created = file.createNewFile();
                if (!created) {
                    throw new IOException("No se pudo crear el archivo passengers.json");
                }
            }

            // Leer contenido existente
            StringBuilder content = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line);
                }
            }

            String json = content.toString().trim();
            if (json.isEmpty()) {
                json = "[]";
            }

            StringBuilder newJson = new StringBuilder();
            if (json.endsWith("]")) {
                newJson.append(json.substring(0, json.length() - 1));
            }

            if (!json.equals("[]")) {
                newJson.append(",");
            }

            String fullName = firstname + " " + lastname;
            String fullPhone = "+" + phoneCode + " " + phone;

            newJson.append("\n  {")
                    .append("\"id\": ").append(id).append(", ")
                    .append("\"name\": \"").append(fullName).append("\", ")
                    .append("\"birthDate\": \"").append(birthDate).append("\", ")
                    .append("\"age\": ").append(age).append(", ")
                    .append("\"phone\": \"").append(fullPhone).append("\", ")
                    .append("\"country\": \"").append(country).append("\", ")
                    .append("\"numFlight\": \"").append(numFlight).append("\"")
                    .append("}\n]");

            // Escribir el nuevo contenido
            try (PrintWriter writer = new PrintWriter(new FileWriter(file))) {
                writer.println(newJson.toString());
            }

            JOptionPane.showMessageDialog(this, "Pasajero registrado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error de formato numérico: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (DateTimeException e) {
            JOptionPane.showMessageDialog(this, "Fecha de nacimiento inválida: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al escribir en el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_RegisterPassengerButtonActionPerformed

    private void AirplaneRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AirplaneRegistrationActionPerformed
        try {
            String id = AirplaneID.getText().trim();
            String brand = AirplaneBranch.getText().trim();
            String model = AirplaneModel.getText().trim();
            String maxCapacityStr = AirpleaneMaxCapacity.getText().trim();
            String airline = AirplaneAirline.getText().trim();

            Response response = AirplaneController.createAirplane(id, brand, model, maxCapacityStr, airline);

            if (response.getStatus() != Status.CREATED) {
                JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int maxCapacity = Integer.parseInt(maxCapacityStr);

            this.planes.add(new Plane(id, brand, model, maxCapacity, airline));
            this.FlightRegistrationPlane.addItem(id);

            File file = new File("json/planes.json");
            JSONArray airplanesArray;

            if (file.exists()) {
                try (InputStream is = new FileInputStream(file)) {
                    JSONTokener tokener = new JSONTokener(is);
                    airplanesArray = new JSONArray(tokener);
                }
            } else {
                file.getParentFile().mkdirs(); // crear carpeta si no existe
                airplanesArray = new JSONArray();
            }

            // Crear avión JSON
            JSONObject airplaneObject = new JSONObject();
            airplaneObject.put("id", id);
            airplaneObject.put("brand", brand);
            airplaneObject.put("model", model);
            airplaneObject.put("maxCapacity", maxCapacity);
            airplaneObject.put("airline", airline);
            airplaneObject.put("numFlights", 0);

            airplanesArray.put(airplaneObject);

            try (FileWriter writer = new FileWriter(file)) {
                writer.write(airplanesArray.toString(4));
            }

            JOptionPane.showMessageDialog(this, "Avión registrado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al acceder o crear planes.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_AirplaneRegistrationActionPerformed

    private void LocationRegistrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocationRegistrationButtonActionPerformed
        String id = LocationRegistrationAirportID.getText().trim();
        String name = LocationRegistrationAirportName.getText().trim();
        String city = LocationRegistrationAirportCity.getText().trim();
        String country = LocationRegistrationAirportCountry.getText().trim();
        String latitudeStr = LocationRegistrationAirportLatitude.getText().trim();
        String longitudeStr = LocationRegistrationAirportLongitude.getText().trim();

        Response response = LocationController.createLocation(id, name, city, country, latitudeStr, longitudeStr);

        if (response.getStatus() != Status.CREATED) {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double latitude = Double.parseDouble(latitudeStr);
        double longitude = Double.parseDouble(longitudeStr);

        this.locations.add(new Location(id, name, city, country, latitude, longitude));

        this.FlightRegistrationLocation.addItem(id);
        this.FlightRegistrationArrivalLocation.addItem(id);
        this.FlightRegistrationScaleLocation.addItem(id);

        File file = new File("locations.json");

        try {
            if (!file.exists()) {
                boolean created = file.createNewFile();
                if (!created) {
                    throw new IOException("No se pudo crear el archivo locations.json");
                }
            }

            StringBuilder content = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line);
                }
            }

            String json = content.toString().trim();
            if (json.isEmpty()) {
                json = "[]";
            }

            StringBuilder newJson = new StringBuilder();
            if (json.endsWith("]")) {
                newJson.append(json.substring(0, json.length() - 1));
            }

            if (!json.equals("[]")) {
                newJson.append(",");
            }

            newJson.append("\n  {")
                    .append("\"id\": \"").append(id).append("\", ")
                    .append("\"name\": \"").append(name).append("\", ")
                    .append("\"city\": \"").append(city).append("\", ")
                    .append("\"country\": \"").append(country).append("\", ")
                    .append("\"latitude\": ").append(latitude).append(", ")
                    .append("\"longitude\": ").append(longitude)
                    .append("}\n]");

            try (PrintWriter writer = new PrintWriter(new FileWriter(file))) {
                writer.println(newJson.toString());
            }

            JOptionPane.showMessageDialog(this, "Ubicación registrada correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al escribir en locations.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_LocationRegistrationButtonActionPerformed

    private void FlightRegistrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlightRegistrationButtonActionPerformed
        String id = FlightRegistrationID.getText();
        String planeId = FlightRegistrationPlane.getItemAt(FlightRegistrationPlane.getSelectedIndex());
        String departureLocationId = FlightRegistrationLocation.getItemAt(FlightRegistrationLocation.getSelectedIndex());
        String arrivalLocationId = FlightRegistrationArrivalLocation.getItemAt(FlightRegistrationArrivalLocation.getSelectedIndex());
        String scaleLocationId = FlightRegistrationScaleLocation.getItemAt(FlightRegistrationScaleLocation.getSelectedIndex());

        String yearStr = FlightRegistrationDepartureYear.getText();
        String monthStr = FlightRegistrationDepartureDateMonth.getItemAt(FlightRegistrationDepartureDateMonth.getSelectedIndex());
        String dayStr = FlightRegistrationDepartureDateDay.getItemAt(FlightRegistrationDepartureDateDay.getSelectedIndex());
        String hourStr = FlightRegistrationDepartureDateHour.getItemAt(FlightRegistrationDepartureDateHour.getSelectedIndex());
        String minuteStr = FlightRegistrationMinute.getItemAt(FlightRegistrationMinute.getSelectedIndex());

        String durationHourStr = FlightRegistrationDurationHour.getItemAt(FlightRegistrationDurationHour.getSelectedIndex());
        String durationMinuteStr = FlightRegistrationDurationMinute.getItemAt(FlightRegistrationDurationMinute.getSelectedIndex());

        String scaleDurationHourStr = FlightRegistrationDurationHour2.getItemAt(FlightRegistrationDurationHour2.getSelectedIndex());
        String scaleDurationMinuteStr = DAY4.getItemAt(DAY4.getSelectedIndex());

        Response validationResponse = FlightsController.validateFlightData(
                id,
                planeId,
                departureLocationId,
                arrivalLocationId,
                scaleLocationId,
                yearStr,
                monthStr,
                dayStr,
                hourStr,
                minuteStr,
                durationHourStr,
                durationMinuteStr,
                scaleDurationHourStr,
                scaleDurationMinuteStr
        );

        if (validationResponse.getStatus() != Status.CREATED) {
            JOptionPane.showMessageDialog(null, validationResponse.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int year = Integer.parseInt(yearStr);
        int month = Integer.parseInt(monthStr);
        int day = Integer.parseInt(dayStr);
        int hour = Integer.parseInt(hourStr);
        int minutes = Integer.parseInt(minuteStr);

        int hoursDurationsArrival = Integer.parseInt(durationHourStr);
        int minutesDurationsArrival = Integer.parseInt(durationMinuteStr);

        int hoursDurationsScale = scaleDurationHourStr.isEmpty() ? 0 : Integer.parseInt(scaleDurationHourStr);
        int minutesDurationsScale = scaleDurationMinuteStr.isEmpty() ? 0 : Integer.parseInt(scaleDurationMinuteStr);

        LocalDateTime departureDate = LocalDateTime.of(year, month, day, hour, minutes);

        String scaleIdForFile = (scaleLocationId == null || scaleLocationId.trim().isEmpty()) ? "null" : scaleLocationId;

        try {
            File file = new File("json/flights.json");
            JSONArray flightsArray;

            //Crear o leer el archivo JSON
            if (file.exists()) {
                try (InputStream is = new FileInputStream(file)) {
                    JSONTokener tokener = new JSONTokener(is);
                    flightsArray = new JSONArray(tokener);
                }
            } else {
                file.getParentFile().mkdirs();
                flightsArray = new JSONArray();
            }

            JSONObject newFlight = new JSONObject();
            newFlight.put("id", id);
            newFlight.put("plane", planeId);
            newFlight.put("departureLocation", departureLocationId);
            newFlight.put("arrivalLocation", arrivalLocationId);
            newFlight.put("scaleLocation", scaleIdForFile.equals("null") ? JSONObject.NULL : scaleIdForFile);
            newFlight.put("departureDate", departureDate.toString());
            newFlight.put("hoursDurationArrival", hoursDurationsArrival);
            newFlight.put("minutesDurationArrival", minutesDurationsArrival);
            newFlight.put("hoursDurationScale", scaleIdForFile.equals("null") ? 0 : hoursDurationsScale);
            newFlight.put("minutesDurationScale", scaleIdForFile.equals("null") ? 0 : minutesDurationsScale);

            flightsArray.put(newFlight);
            try (FileWriter writer = new FileWriter(file)) {
                writer.write(flightsArray.toString(4));
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el vuelo en JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        this.AddFlightFlight.addItem(id);
        JOptionPane.showMessageDialog(null, "Vuelo registrado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_FlightRegistrationButtonActionPerformed

    private void UpdateInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateInfoButtonActionPerformed

        String idStr = UpdateInfoID.getText();
        String firstname = UpdateInfoFirstName.getText();
        String lastname = UpdateInfoLastName.getText();
        String yearStr = UpdateInfoBirthDateYear.getText();
        String monthStr = MONTH.getItemAt(UpdateInfoBirthDateMonth.getSelectedIndex());
        String dayStr = DAY.getItemAt(UpdateInfoBirthDateDay.getSelectedIndex());
        String phoneCodeStr = UpdateInfoPhoneIndicative.getText();
        String phoneStr = UpdateInfoPhone.getText();
        String country = CountryUpdateInfo.getText();

        Response response = UpdateInfoController.validateAndUpdate(
                idStr, firstname, lastname,
                yearStr, monthStr, dayStr,
                phoneCodeStr, phoneStr, country);

        if (response.getStatus() != Status.CREATED) {
            JOptionPane.showMessageDialog(null, response.getMessage(), "Error de validación", JOptionPane.ERROR_MESSAGE);
            return;
        }

        long id = Long.parseLong(idStr.trim());
        int year = Integer.parseInt(yearStr.trim());
        int month = Integer.parseInt(monthStr.trim());
        int day = Integer.parseInt(dayStr.trim());
        int phoneCode = Integer.parseInt(phoneCodeStr.trim());
        long phone = Long.parseLong(phoneStr.trim());
        LocalDate birthDate = LocalDate.of(year, month, day);

        File file = new File("json/passengers.json");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "No se encontró el archivo passengers.json", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JSONArray passengersArray;
        try (InputStream is = new FileInputStream(file)) {
            passengersArray = new JSONArray(new JSONTokener(is));
        } catch (IOException | JSONException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo archivo JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

// Buscar y actualizar pasajero
        boolean found = false;
        for (int i = 0; i < passengersArray.length(); i++) {
            JSONObject obj = passengersArray.getJSONObject(i);
            if (obj.getLong("id") == id) {
                obj.put("firstname", firstname);
                obj.put("lastname", lastname);
                obj.put("birthDate", birthDate.toString());
                obj.put("countryPhoneCode", phoneCode);
                obj.put("phone", phone);
                obj.put("country", country);
                found = true;
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "Pasajero con ID " + id + " no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

// Escribir de nuevo el archivo actualizado
        try (FileWriter fw = new FileWriter(file)) {
            fw.write(passengersArray.toString(4)); // Con sangría para legibilidad
            JOptionPane.showMessageDialog(null, "Datos actualizados correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error escribiendo archivo JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_UpdateInfoButtonActionPerformed

    private void AddToFlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToFlightButtonActionPerformed
        try {
            String passengerIdStr = AddFlightID.getText().trim();
            String flightId = AddFlightFlight.getItemAt(AddFlightFlight.getSelectedIndex());

            // Verificar existencia del pasajero usando el controlador
            Response response = AddToFlightController.verifyPassengerExists(passengerIdStr);
            if (response.getStatus() != Status.OK) {
                JOptionPane.showMessageDialog(this, response.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            long passengerId = Long.parseLong(passengerIdStr);

            File file = new File("json/flights.json");
            JSONArray flightsArray;

            if (!file.exists()) {
                JOptionPane.showMessageDialog(this, "Archivo flights.json no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Leer el JSON de vuelos
            try (InputStream is = new FileInputStream(file)) {
                JSONTokener tokener = new JSONTokener(is);
                flightsArray = new JSONArray(tokener);
            }

            boolean flightFound = false;

            for (int i = 0; i < flightsArray.length(); i++) {
                JSONObject flight = flightsArray.getJSONObject(i);

                if (flight.getString("id").equals(flightId)) {
                    flightFound = true;

                    if (!flight.has("registeredPassengers")) {
                        flight.put("registeredPassengers", String.valueOf(passengerId));
                    } else {
                        String existing = flight.getString("registeredPassengers");
                        List<String> ids = new ArrayList<>(Arrays.asList(existing.split(",")));

                        if (!ids.contains(String.valueOf(passengerId))) {
                            ids.add(String.valueOf(passengerId));
                            flight.put("registeredPassengers", String.join(",", ids));
                        } else {
                            JOptionPane.showMessageDialog(this, "El pasajero ya está registrado en este vuelo.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                    }

                    break;
                }
            }

            if (!flightFound) {
                JOptionPane.showMessageDialog(this, "Vuelo no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try (FileWriter writer = new FileWriter(file)) {
                writer.write(flightsArray.toString(4));
            }

            JOptionPane.showMessageDialog(this, "Pasajero agregado correctamente al vuelo.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al asignar pasajero al vuelo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddToFlightButtonActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        String flightId = DelayID.getItemAt(DelayID.getSelectedIndex());
        int hours = Integer.parseInt(DelayHours.getItemAt(DelayHours.getSelectedIndex()));
        int minutes = Integer.parseInt(DelayMinutes.getItemAt(DelayMinutes.getSelectedIndex()));

        File file = new File("json/flights.json");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "No se encontró el archivo flights.json", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JSONArray flightsArray;
        try (InputStream is = new FileInputStream(file)) {
            flightsArray = new JSONArray(new JSONTokener(is));
        } catch (IOException | JSONException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo archivo flights.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean found = false;
        DateTimeFormatter formatter = null;

        for (int i = 0; i < flightsArray.length(); i++) {
            JSONObject obj = flightsArray.getJSONObject(i);
            if (flightId.equals(obj.getString("id"))) {
                String departureDateStr = obj.getString("departureDate");

                LocalDateTime departureDate = null;
                DateTimeFormatter[] formatters = new DateTimeFormatter[]{
                    DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm"),
                    DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"),
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"),
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                };

                for (DateTimeFormatter fmt : formatters) {
                    try {
                        departureDate = LocalDateTime.parse(departureDateStr, fmt);
                        formatter = fmt;
                        break;
                    } catch (DateTimeParseException ignored) {
                    }
                }

                if (departureDate == null) {
                    JOptionPane.showMessageDialog(null, "Formato de fecha inválido para el vuelo " + flightId, "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Crear instancia de Flight (se usan datos mínimos necesarios)
                Plane dummyPlane = new Plane(obj.getString("plane"), "", "", 0, "");
                Location dummyDeparture = new Location(obj.getString("departureLocation"), "", "", "", 0, 0);
                Location dummyArrival = new Location(obj.getString("arrivalLocation"), "", "", "", 0, 0);
                Location dummyScale = obj.isNull("scaleLocation") ? null : new Location(obj.getString("scaleLocation"), "", "", "", 0, 0);

                int hoursDurationScale = obj.optInt("hoursDurationScale", 0);
                int minutesDurationScale = obj.optInt("minutesDurationScale", 0);
                int hoursDurationArrival = obj.optInt("hoursDurationArrival", 0);
                int minutesDurationArrival = obj.optInt("minutesDurationArrival", 0);

                Flight flight;
                if (dummyScale == null) {
                    flight = new Flight(flightId, dummyPlane, dummyDeparture, dummyArrival, departureDate, hoursDurationArrival, minutesDurationArrival);
                } else {
                    flight = new Flight(flightId, dummyPlane, dummyDeparture, dummyScale, dummyArrival, departureDate, hoursDurationArrival, minutesDurationArrival, hoursDurationScale, minutesDurationScale);
                }

                // Usar método delay
                flight.delay(hours, minutes);

                // Actualizar la fecha en el JSON
                obj.put("departureDate", flight.getDepartureDate().format(formatter));
                found = true;
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "No se encontró el vuelo con ID " + flightId, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (FileWriter fw = new FileWriter(file)) {
            fw.write(flightsArray.toString(4));
            JOptionPane.showMessageDialog(null, "Vuelo retrasado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error escribiendo flights.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton7ActionPerformed

    private void ShowMyFlightsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowMyFlightsButtonActionPerformed
        // Extraer solo el número de ID del combobox (antes del " - ")
        String selected = (String) userSelect.getSelectedItem();
        if (selected == null || !selected.contains(" - ")) {
            return;
        }

        String idStr = selected.split(" - ")[0].trim();

        long passengerId;
        try {
            passengerId = Long.parseLong(idStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "ID inválido");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) ShowMyFlightsTable.getModel();
        model.setRowCount(0); // Limpiar tabla

        try {
            // Leer el JSON de vuelos
            String jsonContent = new String(Files.readAllBytes(Paths.get("json/flights.json")));
            JSONArray flightArray = new JSONArray(jsonContent);

            for (int i = 0; i < flightArray.length(); i++) {
                JSONObject obj = flightArray.getJSONObject(i);

                // Verificar si tiene pasajeros registrados
                String registeredStr = obj.optString("registeredPassengers", "").trim();
                if (registeredStr.isEmpty()) {
                    continue; // Saltar este vuelo si no hay pasajeros
                }

                String[] registeredIds = registeredStr.split(",");

                for (String registered : registeredIds) {
                    if (registered.trim().equals(String.valueOf(passengerId))) {
                        // Si está registrado, agregar fila a la tabla
                        String flightId = obj.getString("id");
                        String departureDate = obj.getString("departureDate");

                        // Calcular llegada sumando duración
                        LocalDateTime depDateTime = LocalDateTime.parse(departureDate);
                        int hours = obj.getInt("hoursDurationArrival");
                        int minutes = obj.getInt("minutesDurationArrival");

                        LocalDateTime arrivalDate = depDateTime.plusHours(hours).plusMinutes(minutes);

                        model.addRow(new Object[]{flightId, departureDate, arrivalDate.toString()});
                        break; // Ya lo encontramos, no es necesario seguir con este vuelo
                    }
                }
            }

        } catch (IOException | JSONException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar los vuelos: " + e.getMessage());
        }
    }//GEN-LAST:event_ShowMyFlightsButtonActionPerformed

    private void RefreshPassengersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshPassengersActionPerformed
        DefaultTableModel model = (DefaultTableModel) ShowAllPassengersTable.getModel();
        model.setRowCount(0);

        File file = new File("json/passengers.json");

        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "No se encontró el archivo passengers.json", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (InputStream is = new FileInputStream(file)) {
            JSONArray passengersArray = new JSONArray(new JSONTokener(is));

            for (int i = 0; i < passengersArray.length(); i++) {
                JSONObject obj = passengersArray.getJSONObject(i);

                long id = obj.getLong("id");
                String fullName = obj.getString("firstname") + " " + obj.getString("lastname");
                String birthDate = obj.getString("birthDate");

                // Calcular edad
                LocalDate birth = LocalDate.parse(birthDate);
                int age = Period.between(birth, LocalDate.now()).getYears();

                String phone = "+" + obj.getInt("countryPhoneCode") + " " + obj.getLong("phone");
                String country = obj.getString("country");
                String numFlight = "0"; // Suponiendo valor fijo como en tu código original

                model.addRow(new Object[]{id, fullName, birthDate, age, phone, country, numFlight});
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo passengers.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (JSONException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar el JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_RefreshPassengersActionPerformed

    private void ShowAllFlightsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllFlightsButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) ShowAllFlightsTable.getModel();
        model.setRowCount(0);

        File file = new File("json/flights.json");

        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "No se encontró el archivo flights.json", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (InputStream is = new FileInputStream(file)) {
            JSONArray flightsArray = new JSONArray(new JSONTokener(is));

            for (int i = 0; i < flightsArray.length(); i++) {
                JSONObject obj = flightsArray.getJSONObject(i);

                String id = obj.getString("id");
                String planeId = obj.getString("plane");
                String departureLocationId = obj.getString("departureLocation");
                String arrivalLocationId = obj.getString("arrivalLocation");

                String scaleLocationId = obj.isNull("scaleLocation") ? null : obj.getString("scaleLocation");
                String departureDateStr = obj.getString("departureDate");

                LocalDateTime departureDate = LocalDateTime.parse(departureDateStr);

                int hoursDurationScale = obj.optInt("hoursDurationScale", 0);
                int minutesDurationScale = obj.optInt("minutesDurationScale", 0);
                int hoursDurationArrival = obj.optInt("hoursDurationArrival", 0);
                int minutesDurationArrival = obj.optInt("minutesDurationArrival", 0);

                // Crear objetos dummy
                Plane plane = new Plane(planeId, "", "", 0, "");
                Location departureLocation = new Location(departureLocationId, "", "", "", 0, 0);
                Location arrivalLocation = new Location(arrivalLocationId, "", "", "", 0, 0);
                Location scaleLocation = scaleLocationId == null ? null : new Location(scaleLocationId, "", "", "", 0, 0);

                // Crear objeto Flight
                Flight flight;
                if (scaleLocation == null) {
                    flight = new Flight(id, plane, departureLocation, arrivalLocation, departureDate,
                            hoursDurationArrival, minutesDurationArrival);
                } else {
                    flight = new Flight(id, plane, departureLocation, scaleLocation, arrivalLocation, departureDate,
                            hoursDurationArrival, minutesDurationArrival, hoursDurationScale, minutesDurationScale);
                }

                String arrivalDateStr = "-";
                try {
                    arrivalDateStr = flight.calculateArrivalDate().toString(); // o usar un formateador si lo prefieres
                } catch (Exception e) {
                    System.err.println("Error al calcular arrivalDate para el vuelo " + id + ": " + e.getMessage());
                }

                // Contar pasajeros registrados desde el campo "registeredPassengers"
                int numPassengers = 0;
                if (obj.has("registeredPassengers") && !obj.isNull("registeredPassengers")) {
                    String registered = obj.getString("registeredPassengers").trim();
                    if (!registered.isEmpty()) {
                        numPassengers = registered.split(",").length;
                    }
                }

                model.addRow(new Object[]{
                    id,
                    departureLocationId,
                    arrivalLocationId,
                    scaleLocationId == null ? "-" : scaleLocationId,
                    departureDateStr,
                    arrivalDateStr,
                    planeId,
                    numPassengers
                });
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo flights.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (JSONException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar el JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_ShowAllFlightsButtonActionPerformed

    private void ShowAllPlanesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllPlanesButtonActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) ShowAllPlanesTable.getModel();
            model.setRowCount(0);

            File file = new File("json/planes.json");
            if (!file.exists()) {
                file.getParentFile().mkdirs(); // crea la carpeta si no existe
                file.createNewFile();
                try (FileWriter writer = new FileWriter(file)) {
                    writer.write("[]"); // escribe un array vacío
                }
            }

            // Cargar vuelos desde flights.json en un arreglo
            JSONArray flightsArray = new JSONArray();
            File flightsFile = new File("json/flights.json");
            if (flightsFile.exists()) {
                try (InputStream is = new FileInputStream(flightsFile)) {
                    flightsArray = new JSONArray(new JSONTokener(is));
                } catch (IOException | JSONException e) {
                    JOptionPane.showMessageDialog(this, "Error leyendo flights.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            // Leer planes y contar sus vuelos
            try (InputStream is = new FileInputStream(file)) {
                JSONArray airplanesArray = new JSONArray(new JSONTokener(is));

                for (int i = 0; i < airplanesArray.length(); i++) {
                    JSONObject obj = airplanesArray.getJSONObject(i);

                    String id = obj.getString("id");
                    String brand = obj.getString("brand");
                    String modelText = obj.getString("model");
                    int maxCapacity = obj.getInt("maxCapacity");
                    String airline = obj.getString("airline");

                    // Contar vuelos para este avión
                    int numFlights = 0;
                    for (int j = 0; j < flightsArray.length(); j++) {
                        JSONObject flight = flightsArray.getJSONObject(j);
                        if (flight.has("planeId")) {
                            String planeId = flight.getString("planeId");
                            if (planeId.equals(id)) {
                                numFlights++;
                            }
                        }
                    }

                    model.addRow(new Object[]{
                        id, brand, modelText, String.valueOf(maxCapacity), airline, String.valueOf(numFlights)
                    });
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer planes.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (JSONException e) {
            JOptionPane.showMessageDialog(this, "Error al procesar el JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ShowAllPlanesButtonActionPerformed

    private void ShowAllLocationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllLocationsButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) ShowAllLocationsTable.getModel();
        model.setRowCount(0);
        this.locations.clear();

        File file = new File("json/locations.json");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "No se encontró el archivo locations.json", "Archivo no encontrado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (InputStream is = new FileInputStream(file)) {
            JSONArray locationsArray = new JSONArray(new JSONTokener(is));
            for (int i = 0; i < locationsArray.length(); i++) {
                JSONObject obj = locationsArray.getJSONObject(i);

                String id = obj.getString("airportId");
                String name = obj.getString("airportName");
                String city = obj.getString("airportCity");
                String country = obj.getString("airportCountry");
                double latitude = obj.getDouble("airportLatitude");
                double longitude = obj.getDouble("airportLongitude");

                Location location = new Location(id, name, city, country, latitude, longitude);
                this.locations.add(location);

                model.addRow(new Object[]{id, name, city, country});
            }
        } catch (IOException | JSONException e) {
            JOptionPane.showMessageDialog(this, "Error al leer locations.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ShowAllLocationsButtonActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void userSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userSelectActionPerformed
        try {
            Object selectedObj = userSelect.getSelectedItem();
            if (selectedObj == null) {
                return;
            }

            String selected = selectedObj.toString();
            if (!selected.equals("Select user")) {
                String id = selected.split(" - ")[0].trim(); // Extraer ID
                UpdateInfoID.setText(id);
                AddFlightID.setText(id);
            } else {
                UpdateInfoID.setText("");
                AddFlightID.setText("");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error procesando selección de usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_userSelectActionPerformed

    private void FlightRegistrationPlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlightRegistrationPlaneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FlightRegistrationPlaneActionPerformed

    private void DelayIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelayIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DelayIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("flatlaf.useNativeLibrary", "false");

        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirportFrame().setVisible(true);
            }
        });
    }

    public void loadData() {
        FlightRegistrationPlane.removeAllItems();
        FlightRegistrationLocation.removeAllItems();
        FlightRegistrationArrivalLocation.removeAllItems();
        FlightRegistrationScaleLocation.removeAllItems();

// Cargar aviones desde planes.json
        File planesFile = new File("json/planes.json");
        if (planesFile.exists()) {
            try (InputStream is = new FileInputStream(planesFile)) {
                JSONArray airplanesArray = new JSONArray(new JSONTokener(is));
                for (int i = 0; i < airplanesArray.length(); i++) {
                    JSONObject obj = airplanesArray.getJSONObject(i);
                    if (obj.has("id")) {
                        String id = obj.getString("id");
                        FlightRegistrationPlane.addItem(id);
                    }
                }
            } catch (IOException | JSONException e) {
                e.printStackTrace();
            }
        }

// Cargar ubicaciones desde locations.json
        File locationsFile = new File("json/locations.json");
        if (locationsFile.exists()) {
            try (InputStream is = new FileInputStream(locationsFile)) {
                JSONArray locationsArray = new JSONArray(new JSONTokener(is));
                for (int i = 0; i < locationsArray.length(); i++) {
                    JSONObject obj = locationsArray.getJSONObject(i);

                    if (!obj.has("airportId") || !obj.has("airportLatitude") || !obj.has("airportLongitude")) {
                        continue;
                    }

                    String id = obj.getString("airportId");
                    double lat, lon;

                    try {
                        lat = Double.parseDouble(obj.get("airportLatitude").toString().replace(',', '.'));
                        lon = Double.parseDouble(obj.get("airportLongitude").toString().replace(',', '.'));
                    } catch (NumberFormatException e) {
                        continue;
                    }

                    // Agregar ID a los combos de locations
                    FlightRegistrationLocation.addItem(id);
                    FlightRegistrationArrivalLocation.addItem(id);
                    FlightRegistrationScaleLocation.addItem(id);
                }
            } catch (IOException | JSONException e) {
                e.printStackTrace();
            }
        }

        DelayID.removeAllItems(); // Limpiar primero

        File file = new File("json/flights.json");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "No se encontró el archivo flights.json", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (InputStream is = new FileInputStream(file)) {
            JSONArray flightsArray = new JSONArray(new JSONTokener(is));
            for (int i = 0; i < flightsArray.length(); i++) {
                JSONObject obj = flightsArray.getJSONObject(i);
                if (obj.has("id")) {
                    String id = obj.getString("id");
                    DelayID.addItem(id);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo flights.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (JSONException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar el JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        AddFlightFlight.removeAllItems(); // Limpiar primero

        try (InputStream is = new FileInputStream(file)) {
            JSONArray flightsArray = new JSONArray(new JSONTokener(is));

            for (int i = 0; i < flightsArray.length(); i++) {
                JSONObject obj = flightsArray.getJSONObject(i);
                if (obj.has("id")) {
                    String id = obj.getString("id");
                    AddFlightFlight.addItem(id);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo flights.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (JSONException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar el JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AddFlightFlight;
    private javax.swing.JTextField AddFlightID;
    private javax.swing.JButton AddToFlightButton;
    private javax.swing.JTextField AirplaneAirline;
    private javax.swing.JTextField AirplaneBranch;
    private javax.swing.JTextField AirplaneID;
    private javax.swing.JTextField AirplaneModel;
    private javax.swing.JButton AirplaneRegistration;
    private javax.swing.JTextField AirpleaneMaxCapacity;
    private javax.swing.JTextField CountryUpdateInfo;
    private javax.swing.JComboBox<String> DAY;
    private javax.swing.JComboBox<String> DAY4;
    private javax.swing.JComboBox<String> DelayHours;
    private javax.swing.JComboBox<String> DelayID;
    private javax.swing.JComboBox<String> DelayMinutes;
    private javax.swing.JComboBox<String> FlightRegistrationArrivalLocation;
    private javax.swing.JButton FlightRegistrationButton;
    private javax.swing.JComboBox<String> FlightRegistrationDepartureDateDay;
    private javax.swing.JComboBox<String> FlightRegistrationDepartureDateHour;
    private javax.swing.JComboBox<String> FlightRegistrationDepartureDateMonth;
    private javax.swing.JTextField FlightRegistrationDepartureYear;
    private javax.swing.JComboBox<String> FlightRegistrationDurationHour;
    private javax.swing.JComboBox<String> FlightRegistrationDurationHour2;
    private javax.swing.JComboBox<String> FlightRegistrationDurationMinute;
    private javax.swing.JTextField FlightRegistrationID;
    private javax.swing.JComboBox<String> FlightRegistrationLocation;
    private javax.swing.JComboBox<String> FlightRegistrationMinute;
    private javax.swing.JComboBox<String> FlightRegistrationPlane;
    private javax.swing.JComboBox<String> FlightRegistrationScaleLocation;
    private javax.swing.JTextField LocationRegistrationAirportCity;
    private javax.swing.JTextField LocationRegistrationAirportCountry;
    private javax.swing.JTextField LocationRegistrationAirportID;
    private javax.swing.JTextField LocationRegistrationAirportLatitude;
    private javax.swing.JTextField LocationRegistrationAirportLongitude;
    private javax.swing.JTextField LocationRegistrationAirportName;
    private javax.swing.JButton LocationRegistrationButton;
    private javax.swing.JComboBox<String> MONTH;
    private javax.swing.JTextField PassengerCountry;
    private javax.swing.JTextField PassengerFirstName;
    private javax.swing.JTextField PassengerID;
    private javax.swing.JTextField PassengerIndicative;
    private javax.swing.JTextField PassengerLastName;
    private javax.swing.JTextField PassngerPhone;
    private javax.swing.JButton RefreshPassengers;
    private javax.swing.JButton RegisterPassengerButton;
    private javax.swing.JButton ShowAllFlightsButton;
    private javax.swing.JTable ShowAllFlightsTable;
    private javax.swing.JButton ShowAllLocationsButton;
    private javax.swing.JTable ShowAllLocationsTable;
    private javax.swing.JTable ShowAllPassengersTable;
    private javax.swing.JButton ShowAllPlanesButton;
    private javax.swing.JTable ShowAllPlanesTable;
    private javax.swing.JButton ShowMyFlightsButton;
    private javax.swing.JTable ShowMyFlightsTable;
    private javax.swing.JComboBox<String> UpdateInfoBirthDateDay;
    private javax.swing.JComboBox<String> UpdateInfoBirthDateMonth;
    private javax.swing.JTextField UpdateInfoBirthDateYear;
    private javax.swing.JButton UpdateInfoButton;
    private javax.swing.JTextField UpdateInfoFirstName;
    private javax.swing.JTextField UpdateInfoID;
    private javax.swing.JTextField UpdateInfoLastName;
    private javax.swing.JTextField UpdateInfoPhone;
    private javax.swing.JTextField UpdateInfoPhoneIndicative;
    private javax.swing.JTextField YEAR;
    private javax.swing.JRadioButton administrator;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private airport.PanelRound panelRound1;
    private airport.PanelRound panelRound2;
    private airport.PanelRound panelRound3;
    private javax.swing.JRadioButton user;
    private javax.swing.JComboBox<String> userSelect;
    // End of variables declaration//GEN-END:variables
}
